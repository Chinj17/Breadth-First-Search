    for (int z = 0; z < 1; ++z) {
        openNode.emplace_back();
        for(int x = 0; x < 3; ++x) {
            openNode[z].emplace_back();
            for (int y = 0; y < 3; ++y) {
                std::cout << "Enter value for [" << std::to_string(z)
                      << "][" << std::to_string(x) << "][" << std::to_string(y) << "]: ";
                std::cin >> val;
                openNode[z][x].push_back(val);
            }
        }
    }

    std::vector<std::vector <std::vector <int>>> start{{{1, 2, 3},
                                                      {4, 5, 6},
                                                      {7, 8, 0}
                                                      },{{11, 12, 13},
                                                         {14, 15, 16},
                                                         {17, 18, 10}}};
    for (int i = 0; i < start.size(); ++i) {
        for (int j = 0; j < start[i].size(); ++j) {
            for (int k = 0; k < start[i][j].size(); ++k) {
                std::cout << start[i][j][k] << '\t';
            }
            std::cout << '\n';
        }
        std::cout << '\n';
    }
    start.erase(start.begin(), start.begin()+ 1);
    for (auto & i: openNode) {
        for (auto & j: i) {
            for (auto k: j) {
                std::cout << k << '\t';
            }
            std::cout << '\n';
        }
        std::cout << '\n';
    }

    std::vector<std::vector<int>> v;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Adding elements to 3d vector
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    std::vector<std::vector <std::vector <int>>> openNode;
    for (int z = 0; z < 1; ++z) {
        openNode.emplace_back();
        for(int x = 0; x < 3; ++x) {
            openNode[z].emplace_back();
            for (int y = 0; y < 3; ++y) {
                std::cout << "Enter value for [" << std::to_string(z)
                          << "][" << std::to_string(x) << "][" << std::to_string(y) << "]: ";
                std::cin >> val;
                openNode[z][x].push_back(val);
            }
        }
    }

    for (auto & i: openNode) {
        for (auto & j: i) {
            for (auto k: j) {
                std::cout << k << '\t';
            }
            std::cout << '\n';
        }
        std::cout << '\n';
    }
    std::cout << "Size: " << openNode.size() << std::endl;
    openNode.resize(2);

    for (int z = 1; z < openNode.size(); ++z) {
        for(int x = 0; x < 3; ++x) {
            openNode[z].emplace_back();
            for (int y = 0; y < 3; ++y) {
                std::cout << "Enter value for [" << std::to_string(z)
                          << "][" << std::to_string(x) << "][" << std::to_string(y) << "]: ";
                std::cin >> val;
                openNode[z][x].push_back(val);
            }
        }
    }
    for (auto & i: openNode) {
        for (auto & j: i) {
            for (auto k: j) {
                std::cout << k << '\t';
            }
            std::cout << '\n';
        }
        std::cout << '\n';
    }

    std::cout << "Size: " << openNode.size() << std::endl;
    openNode.resize(3);

    for (int z = 2; z < openNode.size(); ++z) {
        for(int x = 0; x < 3; ++x) {
            openNode[z].emplace_back();
            for (int y = 0; y < 3; ++y) {
                std::cout << "Enter value for [" << std::to_string(z)
                          << "][" << std::to_string(x) << "][" << std::to_string(y) << "]: ";
                std::cin >> val;
                openNode[z][x].push_back(val);
            }
        }
    }


    for (auto & i: openNode) {
        for (auto & j: i) {
            for (auto k: j) {
                std::cout << k << '\t';
            }
            std::cout << '\n';
        }
        std::cout << '\n';
    }

    std::cout << "Size: " << openNode.size();

__________________________________________________________________

Solvable or not check
____________________________________________________________________
    int getInvCount(int arr[])

    {

        int inv_count = 0;

        for (int i = 0; i < 9 - 1; i++)

            for (int j = i+1; j < 9; j++)

                // Value 0 is used for empty space

                if (arr[j] && arr[i] &&  arr[i] > arr[j])

                    inv_count++;

        return inv_count;

    }

    bool isSolvable() {
        int puzzle[3][3] = {{1, 2, 3},
                            {4, 0, 5},
                            {6, 7, 8}};
        // Count inversions in given 8 puzzle

        int invCount = getInvCount((int *)puzzle);



        // return true if inversion count is even.

        return (invCount%2 == 0);

    }

    bool state = isSolvable();
    std::cout << state;